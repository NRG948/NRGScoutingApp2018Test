{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red34\green34\blue34;\red136\green138\blue133;\red219\green113\blue0;
\red0\green150\blue149;\red51\green99\blue164;}
{\*\expandedcolortbl;;\csgenericrgb\c13333\c13333\c13333;\csgenericrgb\c53333\c54118\c52157;\csgenericrgb\c85882\c44314\c0;
\csgenericrgb\c0\c58824\c58431;\csgenericrgb\c20000\c38824\c64314;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27 \cf2 EnableBackButtonOverride\cf3 =\cf4 "True"\uc0\u8232 \
\
\
\
\
\
\cf0 .3203125\cf5 using\cf6  \cf2 System;\uc0\u8232 \cf5 using\cf6  \cf2 System.Collections.Generic;\uc0\u8232 \cf5 using\cf6  \cf2 System.Linq;\uc0\u8232 \cf5 using\cf6  \cf2 System.Text;\uc0\u8232 \cf5 using\cf6  \cf2 CoreGraphics;\uc0\u8232 \cf5 using\cf6  \cf2 UIKit;\uc0\u8232 \cf5 using\cf6  \cf2 Xamarin.Forms;\uc0\u8232 \cf5 using\cf6  \cf2 Xamarin.Forms.Platform.iOS;\uc0\u8232 \cf5 using\cf6  \cf2 XFNavBarBackBtnClickOverride;\uc0\u8232 \cf5 using\cf6  \cf2 XFNavBarBackBtnClickOverride.iOS;\uc0\u8232 \u8232 \u8232 [\cf5 assembly\cf2 :\cf6  ExportRenderer\cf2 (\cf5 typeof\cf2 (\cf6 CoolContentPage\cf2 ),\cf6  \cf5 typeof\cf2 (\cf6 CoolContentPageRenderer\cf2 ))]\uc0\u8232 \cf5 namespace\cf6  \cf2 XFNavBarBackBtnClickOverride.iOS\uc0\u8232 \{\u8232 \cf6     \cf5 public\cf6  \cf5 class\cf6  CoolContentPageRenderer \cf2 :\cf6  PageRenderer\uc0\u8232     \cf2 \{\uc0\u8232 \cf6         \cf5 public\cf6  \cf5 override\cf6  \cf5 void\cf6  \cf2 ViewWillAppear(\cf5 bool\cf6  \cf2 animated)\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf5 base\cf2 .ViewWillAppear(animated);\uc0\u8232 \cf6             \uc0\u8232             \cf5 if\cf6  \cf2 (((\cf6 CoolContentPage\cf2 )Element).EnableBackButtonOverride)\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf2 SetCustomBackButton();\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6         \cf2 \}\uc0\u8232 \u8232 \cf6         \cf5 private\cf6  \cf5 void\cf6  \cf2 SetCustomBackButton()\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf3 // Load the Back arrow Image\uc0\u8232 \cf6 			\cf5 var\cf6  \cf2 backBtnImage\cf6  \cf2 =\cf6  UIImage\cf2 .FromBundle(\cf4 "iosbackarrow.png"\cf2 );\uc0\u8232 \u8232 \cf6             \cf2 backBtnImage\cf6  \cf2 =\cf6  \uc0\u8232 	            \cf2 backBtnImage.ImageWithRenderingMode(\cf6 UIImageRenderingMode\cf2 .AlwaysTemplate);\uc0\u8232 \u8232 \cf6             \cf3 // Create our Button and set Edge Insets for Title and Image\uc0\u8232 \cf6             \cf5 var\cf6  \cf2 backBtn\cf6  \cf2 =\cf6  \cf5 new\cf6  UIButton\cf2 (\cf6 UIButtonType\cf2 .Custom)\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6 	            \cf2 HorizontalAlignment\cf6  \cf2 =\cf6  UIControlContentHorizontalAlignment\cf2 .Left,\uc0\u8232 \cf6 	            \cf2 TitleEdgeInsets\cf6  \cf2 =\cf6  \cf5 new\cf6  UIEdgeInsets\cf2 (\cf4 11.5f\cf2 ,\cf6  \cf4 15f\cf2 ,\cf6  \cf4 10f\cf2 ,\cf6  \cf4 0f\cf2 ),\uc0\u8232 \cf6 	            \cf2 ImageEdgeInsets\cf6  \cf2 =\cf6  \cf5 new\cf6  UIEdgeInsets\cf2 (\cf4 1f\cf2 ,\cf6  \cf4 8f\cf2 ,\cf6  \cf4 0f\cf2 ,\cf6  \cf4 0f\cf2 )\uc0\u8232 \cf6             \cf2 \} ;\uc0\u8232 \u8232 \cf6             \cf3 // Set the styling for Title\uc0\u8232 \cf6             \cf3 // You could set any Text as you wish here\uc0\u8232 \cf6             \cf2 backBtn.SetTitle(\cf4 "Back"\cf2 ,\cf6  UIControlState\cf2 .Normal);\uc0\u8232 \cf6             \cf3 // use the default blue color in ios back button text\uc0\u8232 \cf6             \cf2 backBtn.SetTitleColor(\cf6 UIColor\cf2 .White,\cf6  UIControlState\cf2 .Normal);\cf6  \uc0\u8232             \cf2 backBtn.SetTitleColor(\cf6 UIColor\cf2 .LightGray,\cf6  UIControlState\cf2 .Highlighted);\uc0\u8232 \cf6             \cf2 backBtn.Font\cf6  \cf2 =\cf6  UIFont\cf2 .FromName(\cf4 "HelveticaNeue"\cf2 ,\cf6  \cf2 (\cf6 nfloat\cf2 )\cf4 17\cf2 );\uc0\u8232 \u8232 \cf6             \cf3 // Set the Image to the button\uc0\u8232 \cf6             \cf2 backBtn.SetImage(backBtnImage,\cf6  UIControlState\cf2 .Normal);\uc0\u8232 \u8232 \cf6             \cf3 // Allow the button to Size itself\uc0\u8232 \cf6             \cf2 backBtn.SizeToFit();\uc0\u8232 \u8232 \cf6             \cf3 // Add the Custom Click event you would like to \uc0\u8232 \cf6             \cf3 // execute upon the Back button click\uc0\u8232 \cf6             \cf2 backBtn.TouchDown\cf6  \cf2 +=\cf6  \cf2 (sender,\cf6  \cf2 e)\cf6  \cf2 =>\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf3 // Whatever your custom back button click handling\uc0\u8232 \u8232 \cf6                 \cf5 if\cf6  \cf2 (((\cf6 CoolContentPage\cf2 )Element)?.CustomBackButtonAction\cf6  \cf2 !=\cf6  \cf5 null\cf2 )\uc0\u8232 \cf6                 \cf2 \{\uc0\u8232 \cf6                     \cf2 ((\cf6 CoolContentPage\cf2 )Element)?.CustomBackButtonAction.Invoke();\uc0\u8232 \cf6                 \cf2 \}\uc0\u8232 \cf6             \cf2 \} ;\uc0\u8232 \u8232 \cf6             \cf3 //Set the frame of the button\uc0\u8232 \cf6             \cf2 backBtn.Frame\cf6  \cf2 =\cf6  \cf5 new\cf6  CGRect\cf2 (\uc0\u8232 \cf6 	            \cf4 0\cf2 ,\uc0\u8232 \cf6 	            \cf4 0\cf2 ,\uc0\u8232 \cf6 	            UIScreen\cf2 .MainScreen.Bounds.Width\cf6  \cf2 /\cf6  \cf4 4\cf2 ,\uc0\u8232 \cf6 	            \cf2 NavigationController.NavigationBar.Frame.Height);\uc0\u8232 \u8232 \cf6             \cf3 // Add our button to a container\uc0\u8232 \cf6             \cf5 var\cf6  \cf2 btnContainer\cf6  \cf2 =\cf6  \cf5 new\cf6  UIView\cf2 (\uc0\u8232 \cf6 	            \cf5 new\cf6  CGRect\cf2 (\cf4 0\cf2 ,\cf6  \cf4 0\cf2 ,\cf6  \cf2 backBtn.Frame.Width,\cf6  \cf2 backBtn.Frame.Height));\uc0\u8232 \cf6             \cf2 btnContainer.AddSubview(backBtn);\uc0\u8232 \u8232 \cf6             \cf3 // A dummy button item to push our custom  back button to\uc0\u8232 \cf6             \cf3 // the edge of screen (sort of a hack)\uc0\u8232 \cf6             \cf5 var\cf6  \cf2 fixedSpace\cf6  \cf2 =\cf6  \cf5 new\cf6  UIBarButtonItem\cf2 (\cf6 UIBarButtonSystemItem\cf2 .FixedSpace)\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6 	            \cf2 Width\cf6  \cf2 =\cf6  \cf2 -\cf4 16f\uc0\u8232 \cf6             \cf2 \} ;\uc0\u8232 \cf6             \cf3 // wrap our custom back button with a UIBarButtonItem\uc0\u8232 \cf6             \cf5 var\cf6  \cf2 backButtonItem\cf6  \cf2 =\cf6  \cf5 new\cf6  UIBarButtonItem\cf2 (\cf4 ""\cf2 ,\cf6  UIBarButtonItemStyle\cf2 .Plain,\cf6  \cf5 null\cf2 )\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6 	            \cf2 CustomView\cf6  \cf2 =\cf6  \cf2 backBtn\uc0\u8232 \cf6             \cf2 \} ;\uc0\u8232 \u8232 \cf6             \cf3 // Add it to the ViewController\uc0\u8232 \cf6             \cf2 NavigationController.TopViewController.NavigationItem.LeftBarButtonItems\cf6  \uc0\u8232             \cf2 =\cf6  \cf5 new\cf2 []\cf6  \cf2 \{\cf6  \cf2 fixedSpace,\cf6  \cf2 backButtonItem\cf6  \cf2 \} ;\uc0\u8232 \cf6 		\cf2 \}\uc0\u8232 \cf6     \cf2 \}\uc0\u8232 \}\u8232 \u8232 \
\
\cf0 .3203125\cf5 using\cf6  \cf2 System;\uc0\u8232 \cf5 using\cf6  \cf2 System.Collections.Generic;\uc0\u8232 \cf5 using\cf6  \cf2 System.Linq;\uc0\u8232 \cf5 using\cf6  \cf2 System.Text;\uc0\u8232 \cf5 using\cf6  \cf2 System.Threading.Tasks;\uc0\u8232 \cf5 using\cf6  \cf2 System.Windows.Input;\uc0\u8232 \cf5 using\cf6  \cf2 Xamarin.Forms;\uc0\u8232 \u8232 \cf5 namespace\cf6  \cf2 XFNavBarBackBtnClickOverride\uc0\u8232 \{\u8232 \cf6     \cf5 public\cf6  \cf5 class\cf6  CoolContentPage \cf2 :\cf6  ContentPage\uc0\u8232     \cf2 \{\uc0\u8232 \cf6         \cf3 /// <summary>\uc0\u8232 \cf6         \cf3 /// Gets or Sets the Back button click overriden custom action\uc0\u8232 \cf6         \cf3 /// </summary>\uc0\u8232 \cf6         \cf5 public\cf6  Action \cf2 CustomBackButtonAction\cf6  \cf2 \{\cf6  \cf5 get\cf2 ;\cf6  \cf5 set\cf2 ;\cf6  \cf2 \}\uc0\u8232 \u8232 \cf6         \cf5 public\cf6  \cf5 static\cf6  \cf5 readonly\cf6  BindableProperty \cf2 EnableBackButtonOverrideProperty\cf6  \cf2 =\uc0\u8232 \cf6                BindableProperty\cf2 .Create(\uc0\u8232 \cf6                \cf5 nameof\cf2 (EnableBackButtonOverride),\uc0\u8232 \cf6                \cf5 typeof\cf2 (\cf5 bool\cf2 ),\uc0\u8232 \cf6                \cf5 typeof\cf2 (\cf6 CoolContentPage\cf2 ),\uc0\u8232 \cf6                \cf5 false\cf2 );\uc0\u8232 \u8232 \cf6         \cf3 /// <summary>\uc0\u8232 \cf6         \cf3 /// Gets or Sets Custom Back button overriding state\uc0\u8232 \cf6         \cf3 /// </summary>\uc0\u8232 \cf6         \cf5 public\cf6  \cf5 bool\cf6  \cf2 EnableBackButtonOverride\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf5 get\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf5 return\cf6  \cf2 (\cf5 bool\cf2 )GetValue(EnableBackButtonOverrideProperty);\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6             \cf5 set\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf2 SetValue(EnableBackButtonOverrideProperty,\cf6  \cf5 value\cf2 );\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6         \cf2 \}\uc0\u8232 \cf6     \cf2 \}\uc0\u8232 \}\u8232 \u8232 \
\
\
\
\cf0 .3203125\cf2 [\cf6 Activity\cf2 (Label\cf6  \cf2 =\cf6  \cf4 "XFNavBarBackBtnClickOverride"\cf2 ,\cf6  \cf2 Icon\cf6  \cf2 =\cf6  \cf4 "@drawable/icon"\cf2 ,\cf6  \cf2 Theme\cf6  \cf2 =\cf6  \cf4 "@style/MainTheme"\cf2 ,\cf6  \cf2 MainLauncher\cf6  \cf2 =\cf6  \cf5 true\cf2 ,\cf6  \cf2 ConfigurationChanges\cf6  \cf2 =\cf6  ConfigChanges\cf2 .ScreenSize\cf6  \cf2 |\cf6  ConfigChanges\cf2 .Orientation)]\uc0\u8232 \cf6     \cf5 public\cf6  \cf5 class\cf6  MainActivity \cf2 :\cf6  FormsAppCompatActivity\uc0\u8232     \cf2 \{\uc0\u8232 \cf6         \cf5 protected\cf6  \cf5 override\cf6  \cf5 void\cf6  \cf2 OnCreate(\cf6 Bundle \cf2 bundle)\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf2 TabLayoutResource\cf6  \cf2 =\cf6  Resource\cf2 .\cf6 Layout\cf2 .Tabbar;\uc0\u8232 \cf6             \cf2 ToolbarResource\cf6  \cf2 =\cf6  Resource\cf2 .\cf6 Layout\cf2 .Toolbar;\uc0\u8232 \u8232 \cf6             \cf5 base\cf2 .OnCreate(bundle);\uc0\u8232 \u8232 \cf6             \cf5 global\cf2 ::Xamarin.Forms.\cf6 Forms\cf2 .Init(\cf5 this\cf2 ,\cf6  \cf2 bundle);\uc0\u8232 \cf6             \cf2 LoadApplication(\cf5 new\cf6  App\cf2 ());\uc0\u8232 \cf6             \uc0\u8232             \cf2 Android.Support.V7.Widget.\cf6 Toolbar \cf2 toolbar\cf6  \uc0\u8232                 \cf2 =\cf6  \cf5 this\cf2 .FindViewById<Android.Support.V7.Widget.\cf6 Toolbar\cf2 >(\cf6 Resource\cf2 .\cf6 Id\cf2 .toolbar);\uc0\u8232 \cf6             \cf2 SetSupportActionBar(toolbar);\uc0\u8232 \cf6         \cf2 \}\uc0\u8232 \cf6         \uc0\u8232         \cf5 public\cf6  \cf5 override\cf6  \cf5 bool\cf6  \cf2 OnOptionsItemSelected(\cf6 IMenuItem \cf2 item)\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf3 // check if the current item id \uc0\u8232 \cf6             \cf3 // is equals to the back button id\uc0\u8232 \cf6             \cf5 if\cf6  \cf2 (item.ItemId\cf6  \cf2 ==\cf6  \cf4 16908332\cf2 )\cf6  \cf3 // xam forms nav bar back button id\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf3 // retrieve the current xamarin \uc0\u8232 \cf6                 \cf3 // forms page instance\uc0\u8232 \cf6                \cf5 var\cf6  \cf2 currentpage\cf6  \cf2 =\cf6  \cf2 (\cf6 CoolContentPage\cf2 )Xamarin.Forms.\cf6 Application\cf2 .Current.\uc0\u8232 \cf6                     \cf2 MainPage.Navigation.NavigationStack.LastOrDefault();\uc0\u8232 \u8232 \cf6                 \cf3 // check if the page has subscribed to the custom back button event\uc0\u8232 \cf6                 \cf5 if\cf6  \cf2 (currentpage?.CustomBackButtonAction\cf6  \cf2 !=\cf6  \cf5 null\cf2 )\uc0\u8232 \cf6                 \cf2 \{\uc0\u8232 \cf6                     \cf3 // invoke the Custom back button action\uc0\u8232 \cf6                     \cf2 currentpage?.CustomBackButtonAction.Invoke();\uc0\u8232 \cf6                     \cf3 // and disable the default back button action\uc0\u8232 \cf6                     \cf5 return\cf6  \cf5 false\cf2 ;\uc0\u8232 \cf6                 \cf2 \}\uc0\u8232 \u8232 \cf6                 \cf3 // if its not subscribed then go ahead \uc0\u8232 \cf6                 \cf3 // with the default back button action\uc0\u8232 \cf6                 \cf5 return\cf6  \cf5 base\cf2 .OnOptionsItemSelected(item);\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6             \cf5 else\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf3 // since its not the back button \uc0\u8232 \cf6                 \cf3 //click, pass the event to the base\uc0\u8232 \cf6                 \cf5 return\cf6  \cf5 base\cf2 .OnOptionsItemSelected(item);\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6         \cf2 \}\uc0\u8232 \u8232 \cf6         \cf5 public\cf6  \cf5 override\cf6  \cf5 void\cf6  \cf2 OnBackPressed()\uc0\u8232 \cf6         \cf2 \{\uc0\u8232 \cf6             \cf3 // this is really not necessary, but in Android user has both Nav bar back button \uc0\u8232 \cf6             \cf3 // and physical back button, so its safe to cover the both events\uc0\u8232 \u8232 \cf6             \cf5 var\cf6  \cf2 currentpage\cf6  \cf2 =\cf6  \cf2 (\cf6 CoolContentPage\cf2 )Xamarin.Forms.\cf6 Application\cf2 .Current.\uc0\u8232 \cf6                 \cf2 MainPage.Navigation.NavigationStack.LastOrDefault();\uc0\u8232 \u8232 \cf6             \cf5 if\cf6  \cf2 (currentpage?.CustomBackButtonAction\cf6  \cf2 !=\cf6  \cf5 null\cf2 )\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf2 currentpage?.CustomBackButtonAction.Invoke();\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6             \cf5 else\uc0\u8232 \cf6             \cf2 \{\uc0\u8232 \cf6                 \cf5 base\cf2 .OnBackPressed();\uc0\u8232 \cf6             \cf2 \}\uc0\u8232 \cf6         \cf2 \}\uc0\u8232 \cf6     \cf2 \}\uc0\u8232 }